// Generated by gencpp from file mav_utils_msgs/BBPoses.msg
// DO NOT EDIT!


#ifndef MAV_UTILS_MSGS_MESSAGE_BBPOSES_H
#define MAV_UTILS_MSGS_MESSAGE_BBPOSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mav_utils_msgs/BBPose.h>

namespace mav_utils_msgs
{
template <class ContainerAllocator>
struct BBPoses_
{
  typedef BBPoses_<ContainerAllocator> Type;

  BBPoses_()
    : stamp()
    , imageID(0)
    , object_poses()  {
    }
  BBPoses_(const ContainerAllocator& _alloc)
    : stamp()
    , imageID(0)
    , object_poses(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _imageID_type;
  _imageID_type imageID;

   typedef std::vector< ::mav_utils_msgs::BBPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mav_utils_msgs::BBPose_<ContainerAllocator> >> _object_poses_type;
  _object_poses_type object_poses;





  typedef boost::shared_ptr< ::mav_utils_msgs::BBPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_utils_msgs::BBPoses_<ContainerAllocator> const> ConstPtr;

}; // struct BBPoses_

typedef ::mav_utils_msgs::BBPoses_<std::allocator<void> > BBPoses;

typedef boost::shared_ptr< ::mav_utils_msgs::BBPoses > BBPosesPtr;
typedef boost::shared_ptr< ::mav_utils_msgs::BBPoses const> BBPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_utils_msgs::BBPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mav_utils_msgs::BBPoses_<ContainerAllocator1> & lhs, const ::mav_utils_msgs::BBPoses_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.imageID == rhs.imageID &&
    lhs.object_poses == rhs.object_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mav_utils_msgs::BBPoses_<ContainerAllocator1> & lhs, const ::mav_utils_msgs::BBPoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mav_utils_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_utils_msgs::BBPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_utils_msgs::BBPoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_utils_msgs::BBPoses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed4ca9b702b46a3d3b707fa59df1e978";
  }

  static const char* value(const ::mav_utils_msgs::BBPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed4ca9b702b46a3dULL;
  static const uint64_t static_value2 = 0x3b707fa59df1e978ULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_utils_msgs/BBPoses";
  }

  static const char* value(const ::mav_utils_msgs::BBPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 imageID\n"
"BBPose[] object_poses\n"
"\n"
"================================================================================\n"
"MSG: mav_utils_msgs/BBPose\n"
"int32 boxID\n"
"int32 type\n"
"float32 area\n"
"bool store\n"
"geometry_msgs/Point position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mav_utils_msgs::BBPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.imageID);
      stream.next(m.object_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BBPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_utils_msgs::BBPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_utils_msgs::BBPoses_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "imageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imageID);
    s << indent << "object_poses[]" << std::endl;
    for (size_t i = 0; i < v.object_poses.size(); ++i)
    {
      s << indent << "  object_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mav_utils_msgs::BBPose_<ContainerAllocator> >::stream(s, indent + "    ", v.object_poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_UTILS_MSGS_MESSAGE_BBPOSES_H
