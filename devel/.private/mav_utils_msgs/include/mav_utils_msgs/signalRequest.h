// Generated by gencpp from file mav_utils_msgs/signalRequest.msg
// DO NOT EDIT!


#ifndef MAV_UTILS_MSGS_MESSAGE_SIGNALREQUEST_H
#define MAV_UTILS_MSGS_MESSAGE_SIGNALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mav_utils_msgs
{
template <class ContainerAllocator>
struct signalRequest_
{
  typedef signalRequest_<ContainerAllocator> Type;

  signalRequest_()
    : signal(0)  {
    }
  signalRequest_(const ContainerAllocator& _alloc)
    : signal(0)  {
  (void)_alloc;
    }



   typedef int8_t _signal_type;
  _signal_type signal;





  typedef boost::shared_ptr< ::mav_utils_msgs::signalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_utils_msgs::signalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct signalRequest_

typedef ::mav_utils_msgs::signalRequest_<std::allocator<void> > signalRequest;

typedef boost::shared_ptr< ::mav_utils_msgs::signalRequest > signalRequestPtr;
typedef boost::shared_ptr< ::mav_utils_msgs::signalRequest const> signalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_utils_msgs::signalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mav_utils_msgs::signalRequest_<ContainerAllocator1> & lhs, const ::mav_utils_msgs::signalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.signal == rhs.signal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mav_utils_msgs::signalRequest_<ContainerAllocator1> & lhs, const ::mav_utils_msgs::signalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mav_utils_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_utils_msgs::signalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_utils_msgs::signalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_utils_msgs::signalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0a9ea278ff8b1fac5ebbc28e1a9324e";
  }

  static const char* value(const ::mav_utils_msgs::signalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0a9ea278ff8b1faULL;
  static const uint64_t static_value2 = 0xc5ebbc28e1a9324eULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_utils_msgs/signalRequest";
  }

  static const char* value(const ::mav_utils_msgs::signalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 signal\n"
;
  }

  static const char* value(const ::mav_utils_msgs::signalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct signalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_utils_msgs::signalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_utils_msgs::signalRequest_<ContainerAllocator>& v)
  {
    s << indent << "signal: ";
    Printer<int8_t>::stream(s, indent + "  ", v.signal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_UTILS_MSGS_MESSAGE_SIGNALREQUEST_H
