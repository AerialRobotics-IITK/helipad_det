# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mav_utils_msgs/BBoxes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mav_utils_msgs.msg

class BBoxes(genpy.Message):
  _md5sum = "132eb21f59342318bc09c3939b6621fb"
  _type = "mav_utils_msgs/BBoxes"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
int32 imageID
BBox[] objects

================================================================================
MSG: mav_utils_msgs/BBox
int32 boxID
int32 pixSize
int32 contourSize
string colour
float32 diagIndex
float32 areaIndex
float32 eigenIndex
int32[] rangeX
int32[] rangeY
float32[] centre
float32[] cornerX
float32[] cornerY
float32[] eigenVal
float32[] eigenVec
int32[] contourX
int32[] contourY
bool full
bool store
"""
  __slots__ = ['stamp','imageID','objects']
  _slot_types = ['time','int32','mav_utils_msgs/BBox[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,imageID,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BBoxes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.imageID is None:
        self.imageID = 0
      if self.objects is None:
        self.objects = []
    else:
      self.stamp = genpy.Time()
      self.imageID = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii().pack(_x.stamp.secs, _x.stamp.nsecs, _x.imageID))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.boxID, _x.pixSize, _x.contourSize))
        _x = val1.colour
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.diagIndex, _x.areaIndex, _x.eigenIndex))
        length = len(val1.rangeX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.rangeX))
        length = len(val1.rangeY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.rangeY))
        length = len(val1.centre)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.centre))
        length = len(val1.cornerX)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.cornerX))
        length = len(val1.cornerY)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.cornerY))
        length = len(val1.eigenVal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.eigenVal))
        length = len(val1.eigenVec)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.eigenVec))
        length = len(val1.contourX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.contourX))
        length = len(val1.contourY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.contourY))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.full, _x.store))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.imageID,) = _get_struct_2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = mav_utils_msgs.msg.BBox()
        _x = val1
        start = end
        end += 12
        (_x.boxID, _x.pixSize, _x.contourSize,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.colour = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.colour = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.diagIndex, _x.areaIndex, _x.eigenIndex,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rangeX = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rangeY = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.centre = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cornerX = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cornerY = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.eigenVal = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.eigenVec = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.contourX = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.contourY = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.full, _x.store,) = _get_struct_2B().unpack(str[start:end])
        val1.full = bool(val1.full)
        val1.store = bool(val1.store)
        self.objects.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii().pack(_x.stamp.secs, _x.stamp.nsecs, _x.imageID))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.boxID, _x.pixSize, _x.contourSize))
        _x = val1.colour
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.diagIndex, _x.areaIndex, _x.eigenIndex))
        length = len(val1.rangeX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.rangeX.tostring())
        length = len(val1.rangeY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.rangeY.tostring())
        length = len(val1.centre)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.centre.tostring())
        length = len(val1.cornerX)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.cornerX.tostring())
        length = len(val1.cornerY)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.cornerY.tostring())
        length = len(val1.eigenVal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.eigenVal.tostring())
        length = len(val1.eigenVec)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.eigenVec.tostring())
        length = len(val1.contourX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.contourX.tostring())
        length = len(val1.contourY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.contourY.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.full, _x.store))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.imageID,) = _get_struct_2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = mav_utils_msgs.msg.BBox()
        _x = val1
        start = end
        end += 12
        (_x.boxID, _x.pixSize, _x.contourSize,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.colour = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.colour = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.diagIndex, _x.areaIndex, _x.eigenIndex,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rangeX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rangeY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.centre = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cornerX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cornerY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.eigenVal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.eigenVec = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.contourX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.contourY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.full, _x.store,) = _get_struct_2B().unpack(str[start:end])
        val1.full = bool(val1.full)
        val1.store = bool(val1.store)
        self.objects.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2Ii = None
def _get_struct_2Ii():
    global _struct_2Ii
    if _struct_2Ii is None:
        _struct_2Ii = struct.Struct("<2Ii")
    return _struct_2Ii
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
