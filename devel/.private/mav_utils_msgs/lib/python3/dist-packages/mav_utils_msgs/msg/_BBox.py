# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mav_utils_msgs/BBox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BBox(genpy.Message):
  _md5sum = "fd2583954c87e86ec1cf450da38931e5"
  _type = "mav_utils_msgs/BBox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 boxID
int32 pixSize
int32 contourSize
string colour
float32 diagIndex
float32 areaIndex
float32 eigenIndex
int32[] rangeX
int32[] rangeY
float32[] centre
float32[] cornerX
float32[] cornerY
float32[] eigenVal
float32[] eigenVec
int32[] contourX
int32[] contourY
bool full
bool store
"""
  __slots__ = ['boxID','pixSize','contourSize','colour','diagIndex','areaIndex','eigenIndex','rangeX','rangeY','centre','cornerX','cornerY','eigenVal','eigenVec','contourX','contourY','full','store']
  _slot_types = ['int32','int32','int32','string','float32','float32','float32','int32[]','int32[]','float32[]','float32[]','float32[]','float32[]','float32[]','int32[]','int32[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boxID,pixSize,contourSize,colour,diagIndex,areaIndex,eigenIndex,rangeX,rangeY,centre,cornerX,cornerY,eigenVal,eigenVec,contourX,contourY,full,store

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BBox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.boxID is None:
        self.boxID = 0
      if self.pixSize is None:
        self.pixSize = 0
      if self.contourSize is None:
        self.contourSize = 0
      if self.colour is None:
        self.colour = ''
      if self.diagIndex is None:
        self.diagIndex = 0.
      if self.areaIndex is None:
        self.areaIndex = 0.
      if self.eigenIndex is None:
        self.eigenIndex = 0.
      if self.rangeX is None:
        self.rangeX = []
      if self.rangeY is None:
        self.rangeY = []
      if self.centre is None:
        self.centre = []
      if self.cornerX is None:
        self.cornerX = []
      if self.cornerY is None:
        self.cornerY = []
      if self.eigenVal is None:
        self.eigenVal = []
      if self.eigenVec is None:
        self.eigenVec = []
      if self.contourX is None:
        self.contourX = []
      if self.contourY is None:
        self.contourY = []
      if self.full is None:
        self.full = False
      if self.store is None:
        self.store = False
    else:
      self.boxID = 0
      self.pixSize = 0
      self.contourSize = 0
      self.colour = ''
      self.diagIndex = 0.
      self.areaIndex = 0.
      self.eigenIndex = 0.
      self.rangeX = []
      self.rangeY = []
      self.centre = []
      self.cornerX = []
      self.cornerY = []
      self.eigenVal = []
      self.eigenVec = []
      self.contourX = []
      self.contourY = []
      self.full = False
      self.store = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.boxID, _x.pixSize, _x.contourSize))
      _x = self.colour
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.diagIndex, _x.areaIndex, _x.eigenIndex))
      length = len(self.rangeX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.rangeX))
      length = len(self.rangeY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.rangeY))
      length = len(self.centre)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.centre))
      length = len(self.cornerX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cornerX))
      length = len(self.cornerY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cornerY))
      length = len(self.eigenVal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.eigenVal))
      length = len(self.eigenVec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.eigenVec))
      length = len(self.contourX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.contourX))
      length = len(self.contourY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.contourY))
      _x = self
      buff.write(_get_struct_2B().pack(_x.full, _x.store))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.boxID, _x.pixSize, _x.contourSize,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.colour = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.colour = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diagIndex, _x.areaIndex, _x.eigenIndex,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rangeX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rangeY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.centre = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eigenVal = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eigenVec = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contourX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contourY = s.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.full, _x.store,) = _get_struct_2B().unpack(str[start:end])
      self.full = bool(self.full)
      self.store = bool(self.store)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.boxID, _x.pixSize, _x.contourSize))
      _x = self.colour
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.diagIndex, _x.areaIndex, _x.eigenIndex))
      length = len(self.rangeX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.rangeX.tostring())
      length = len(self.rangeY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.rangeY.tostring())
      length = len(self.centre)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.centre.tostring())
      length = len(self.cornerX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cornerX.tostring())
      length = len(self.cornerY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cornerY.tostring())
      length = len(self.eigenVal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.eigenVal.tostring())
      length = len(self.eigenVec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.eigenVec.tostring())
      length = len(self.contourX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.contourX.tostring())
      length = len(self.contourY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.contourY.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.full, _x.store))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.boxID, _x.pixSize, _x.contourSize,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.colour = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.colour = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diagIndex, _x.areaIndex, _x.eigenIndex,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rangeX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rangeY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.centre = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eigenVal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eigenVec = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contourX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contourY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 2
      (_x.full, _x.store,) = _get_struct_2B().unpack(str[start:end])
      self.full = bool(self.full)
      self.store = bool(self.store)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
