# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mav_utils_msgs/BBPoses.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import mav_utils_msgs.msg

class BBPoses(genpy.Message):
  _md5sum = "ed4ca9b702b46a3d3b707fa59df1e978"
  _type = "mav_utils_msgs/BBPoses"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
int32 imageID
BBPose[] object_poses

================================================================================
MSG: mav_utils_msgs/BBPose
int32 boxID
int32 type
float32 area
bool store
geometry_msgs/Point position

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['stamp','imageID','object_poses']
  _slot_types = ['time','int32','mav_utils_msgs/BBPose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,imageID,object_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BBPoses, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.imageID is None:
        self.imageID = 0
      if self.object_poses is None:
        self.object_poses = []
    else:
      self.stamp = genpy.Time()
      self.imageID = 0
      self.object_poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii().pack(_x.stamp.secs, _x.stamp.nsecs, _x.imageID))
      length = len(self.object_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_poses:
        _x = val1
        buff.write(_get_struct_2ifB().pack(_x.boxID, _x.type, _x.area, _x.store))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.object_poses is None:
        self.object_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.imageID,) = _get_struct_2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_poses = []
      for i in range(0, length):
        val1 = mav_utils_msgs.msg.BBPose()
        _x = val1
        start = end
        end += 13
        (_x.boxID, _x.type, _x.area, _x.store,) = _get_struct_2ifB().unpack(str[start:end])
        val1.store = bool(val1.store)
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.object_poses.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii().pack(_x.stamp.secs, _x.stamp.nsecs, _x.imageID))
      length = len(self.object_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_poses:
        _x = val1
        buff.write(_get_struct_2ifB().pack(_x.boxID, _x.type, _x.area, _x.store))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.object_poses is None:
        self.object_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.imageID,) = _get_struct_2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_poses = []
      for i in range(0, length):
        val1 = mav_utils_msgs.msg.BBPose()
        _x = val1
        start = end
        end += 13
        (_x.boxID, _x.type, _x.area, _x.store,) = _get_struct_2ifB().unpack(str[start:end])
        val1.store = bool(val1.store)
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.object_poses.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ii = None
def _get_struct_2Ii():
    global _struct_2Ii
    if _struct_2Ii is None:
        _struct_2Ii = struct.Struct("<2Ii")
    return _struct_2Ii
_struct_2ifB = None
def _get_struct_2ifB():
    global _struct_2ifB
    if _struct_2ifB is None:
        _struct_2ifB = struct.Struct("<2ifB")
    return _struct_2ifB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
